%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% File Name:parallel_mv_p1.m
% Function: this is the p1 of mv in parallel, input matrix is 'InputMatrix', input vector table should read the current iteration value from cur_it table
%
myDB; %% connect to DB and return a binding named DB.

machines_t = DB('NumOfMachines');
nodes_t = DB('NumOfNodes');
cur_it = DB('cur_it');


NumOfMachines = str2num(Val(machines_t('1,','1,')));
NumOfNodes = str2num(Val(nodes_t('1,','1,')));
vector = [num2str(NumOfNodes) 'lz_q' num2str(str2num(Val(cur_it('1,','1,'))))];


disp(['!!!!!!!Now running matrix multiply the vector!!!!!!!!!!!!!']);
disp(['********matrix:  InputMatrix  times vector: ' vector ' into mv_temp ************']);

m = DB(['M' num2str(NumOfNodes)]);
v = DB(vector);
temp = DB('mv_temp'); %%hard coded temporary output table


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% parallel part %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% For now split is evenly distributed among the machines
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

gap = floor(NumOfNodes / NumOfMachines);
myMachine = 1:NumOfMachines;
w = zeros(NumOfMachines,1,map([Np 1],{},0:Np-1));
myMachine = global_ind(w); %Parallel


for i = myMachine

        start_node = (i-1)*gap+1;
        if (i<NumOfMachines)
        end_node = i*gap ;
        else
        end_node = NumOfNodes ;
        end

        %% read all input from this node 
        ColsOfMatrix = m(:,sprintf('%d,',start_node:end_node));  %% Get all the rows from col j from input matrix!!

        %% read the corresponding vector for this node
        [vectorR,vectorC,vectorV] = v(sprintf('%d,',start_node:end_node),:); % everything returns from associative array is string
        vectorV = str2num(vectorV);  % get the integer num of vectorV
        
        % Store the result for building up the associative arrays
        ArowStr;
        AcolStr;
        AvalStr;
        
    for j = start_node:end_node
	    disp(['current j is:' num2str(j)]);
	    [JR, JC, JCol] = ColsOfMatrix(:,sprintf('%d,',j))
        if(~isempty(JCol))
         JCol = str2num(JCol);
         Jvector = vectorV(j);
         JCol = JCol .* Jvector;
         rowStr = sprintf('%d,',str2num(JR))
         colStr = sprintf('%d,',str2num(JC));
         valStr = sprintf('%.15f,',JCol);
         ArowStr = strcat(ArowStr,rowStr);
         AcolStr = strcat(AcolStr,colStr);
         AvalStr = strcat(AvalStr,valStr);
        end
    end
	ArowStr
      
	
        put(temp,Assoc(ArowStr,AcolStr,AvalStr));
end
agg(w)
      




